#!/usr/bin/env php
<?
	require('repos-tools/utils.inc');

	$actions = array ( 
		"activity" => array("show activity feed for <user> (mine by default)", "[<user>]"),
		"clone"    => array("clone one or more repositories", "<repo>+"),
		"create"   => array("create a public repository", "<name>"),
		"fork"     => array("fork a repository", "<repo>"),
		"forkc"    => array("fork a repository and clone your copy", "<repo>"),
		"info"     => array("get info on a github user (on me by default)",
				"[<user>]"),
		"issues"   => array("list (lists all open issues) or:\n".
		"                        {comment|close} <issue #> [<comment>]",
				"(*)"),
		"follow"   => array( "start following one or more users", "<user>+" ),
		"followers" => array( "list followers of <user> (mine by default)",
				"[<user>]" ),
		"news"     => array("show your private feed", ""),
		"rinfo"    => array("info on this repository", "(*)"),
		"unfollow" => array("stop following users", "<user>+"),
		"unwatch"  => array("stop watching repositories", "<repo>+"),
		"watch"    => array("start watching one or more repository", "<repo>+"),
		"watchers" => array("list watchers", "(*)"),
	);

	function usage() {
		global $argv, $actions;
		$name = basename($argv[0]);

		echo "Usage: $name <command> [<args>]\n";
		echo "commands:\n";
		foreach ($actions as $k => $v) { 
			pad("   $k ".$v[1],20);
			echo "\t$v[0]\n"; 
		}
		echo "commands marked with (*) must be run from a working dir.\n";
		exit;
	}

	function print_user($user) {
		pad("User:", 30); echo $user["login"]." (".$user["name"].")\n";	
		pad("Pubblic repositories:", 30); echo $user["public_repo_count"]."\n";
		pad("Following", 30); echo $user["following_count"]." users\n";
		pad("Followed by", 30); echo $user["followers_count"]." users\n";
	}

	function print_repo($repo) {
		pad("Name:", 20); color_on(GREEN); echo $repo["name"]; color_off();
		pad("\nDescription:", 21); echo $repo["description"];
		pad("\nHomepage:", 21); echo $repo["homepage"];
		pad("\nForks:", 21); echo $repo["forks"];
		pad("\nWatchers:", 21); echo $repo["watchers"]."\n";
	}

	function print_repos($watches) {
		foreach ($watches as $repo) {
			echo "    ".$repo["owner"]."/"; color_on(GREEN);
			padto($repo["name"], 40);
			color_off();
			echo $repo["url"]."\n";
		}
	}

	function print_followers($followers, $user) {
		global $gh_user;

		$cf = count($followers);
		echo ($user==$gh_user ? "You have": "$user has")." $cf follower(s)";
		if($cf) echo ": ".implode(", ", $followers);
		echo ".\n";
	}

	function print_watchers($watchers, $repo) {
		$cf = count($watchers);
		echo "You have $cf watcher(s) for repository $repo";
		if($cf) echo ": ".implode(", ", $watchers);
		echo ".\n";
	}

	function print_issues($issues) {
		foreach ($issues as $issue) {
			color_on(RED); echo "#".$issue["number"]."\t";
			color_off(); echo $issue["title"]."\n";
		}
	}

	function check_third_arg($argc, $argv) {
		if($argc<3) {
			echo "Command ".$argv[1]." requires an argument.\n\n";
			usage();
		}
	}
	
	function check_repo_arg($arg) {
		if(strpos($arg,'/')===FALSE) {
			echo "Specify the repository as 'user/repository'\n\n";
			usage();
		}
	}

	function check_is_wd() {
		if(!is_dir(getcwd()."/.git")) {
			echo "You should run this command in a working directory.\n\n";
			usage();
		}
	}

    function showFeedItem($item) {
		$title = $item->title;
		$when = $item->updated;
		$words = explode(" ", $title);
		$author = array_shift($words);
		$action = array_shift($words);
		if($action=="started" || $action=="open")
			$action = $action." ".array_shift($words);
		echo date("[d/m/Y] ", strtotime($when));
		color_on(GREEN); echo $author;
		color_on(YELLOW); echo " ".$action." ";
		color_off(); echo implode($words," ")."\n";
    }

	function showFeed($url) {
		$feed = simplexml_load_file($url);
		$items = $feed->entry;
		foreach ($items as $item) showFeedItem($item);
	}

	$argc = count($argv);
	if($argc < 2) usage();
	if(!array_key_exists($argv[1], $actions)) usage();

	require('repos-tools/php_github.inc');
	switch($argv[1]) {
		case "activity":
			$uname = ($argc > 2 ? $argv[2] : $gh_user);
			showFeed("http://github.com/$uname.atom");
			break;
		case "clone":
			check_third_arg($argc, $argv);
			/* if I don't specify a username, then it's a repo of mine
			 * so clone using git. Otherwise go with ro http
			 */
			foreach (array_slice($argv,2) as $repo)
				if(strpos($repo, '/')===FALSE)
					system("git clone git@github.com:$gh_user/$repo.git");
				else
					system("git clone http://github.com/$repo.git");
			break;
		case "create":
			check_third_arg($argc, $argv);
			$gh->getRepoApi()->create($argv[2]);
			break;
		case "fork":
			check_third_arg($argc, $argv);
			check_repo_arg($argv[2]);
			$gh->get('repos/fork/'.$argv[2]);
			break;
		case "forkc":
			check_third_arg($argc, $argv);
			check_repo_arg($argv[2]);
			$gh->get('repos/fork/'.$argv[2]);
			$repo = basename($argv[2]); //it's a path. isn't it?
			system("git clone git@github.com:$gh_user/$repo.git");
			break;
		case "info":
			$uname = ($argc > 2 ? $argv[2] : $gh_user);
			$user = $gh->getUserApi()->show($uname);
			print_user($user);
			$repos = $gh->getRepoApi()->getUserRepos($uname);
			echo ($uname==$gh_user ? "Your r":"R")."epositories (".count($repos)."):\n";
			print_repos($repos);
			$watches = $gh->getUserApi()->getWatchedRepos($uname);
			foreach($watches as $k => $v) 
				if ($v["owner"]==$uname) unset($watches[$k]);
			echo "Watched repositories (".count($watches)."):\n";
			print_repos($watches);
			break;
		case "news":
			showFeed("https://github.com/$gh_user.private.atom?token=$gh_token");
			break;
		case "rinfo":
			check_is_wd();
			$name = basename(getcwd());
			$repo = $gh->getRepoApi()->show($gh_user, $name);
			print_repo($repo);
			break;
		case "issues":
			check_third_arg($argc, $argv);
			check_is_wd();
			$repo =  basename(getcwd());
			if($argv[2]=="list") {
				$issues = $gh->getIssueApi()->getList(
					$gh_user,
					$repo,
					'open');
				print_issues($issues);
			} else if($argv[2]=="close") {
				$gh->getIssueApi()->close($gh_user, $repo, $argv[3]);
			} else if($argv[2]=="comment") {
				$gh->getIssueApi()->addComment($gh_user, $repo, 
					$argv[3], $argv[4]);
			} else {
				echo "Can't do '".$argv[2]."' on an issue.\n";
				usage();
			}
			break;
		case "follow":
			check_third_arg($argc, $argv);
			foreach (array_slice($argv, 2) as $user)
				$gh->getUserApi()->follow($user);
			break;
		case "unfollow":
			check_third_arg($argc, $argv);
			foreach (array_slice($argv, 2) as $user)
				$gh->getUserApi()->unFollow($user);
			break;
		case "followers":
			$user = ($argc > 2 ? $argv[2] : $gh_user);
			$followers = $gh->getUserApi()->getFollowers($user);
			print_followers($followers, $user);
			break;
		case "watch":
			check_third_arg($argc, $argv);
			check_repo_arg($argv[2]);
			foreach (array_slice($argv, 2) as $repo)
				$gh->get('repos/watch/'.$repo);
			break;
		case "watchers":
			check_is_wd();
			$repo =  basename(getcwd());
			$res = $gh->get("/repos/show/$gh_user/$repo/watchers");
			print_watchers($res["watchers"], $repo);
			break;
		case "unwatch":
			check_third_arg($argc, $argv);
			check_repo_arg($argv[2]);
			foreach (array_slice($argv, 2) as $repo)
				$gh->get('repos/unwatch/'.$repo);
			break;
	}

	$gh->deAuthenticate();
?>