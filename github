#!/usr/bin/php
<?
	include('utils.inc');

	$actions = array ( 
		"clone" => "<repo> clones the specified repository",
		"info" => "get info on my network and watched repositories",
		"issues" => "list (lists all open issues) or:\n\t\t".
					"{comment|close} <issue #> [<comment>]\n\t\t".
					"(uses the repository you're working on)",
		"follow" => "<user> start following an user",
		"followers" => "list my followers",
		"unfollow" => "<user> stop following an user",
		"unwatch" => "<repo> stop watching a repository",
		"watch" => "<repo> start watching a repository"
	);

	function usage() {
		global $argv, $actions;
		$name = basename($argv[0]);

		echo "Usage: $name <command> [<args>]\n";
		echo "commands:\n";
		foreach ($actions as $k => $v) echo "\t$k\t$v\n";
		exit;
	}

	function print_user($user) {
		echo "User: ".$user["login"]." (".$user["name"].")\n";
		echo "Pubblic repositories: ".$user["public_repo_count"];
		echo "\nFollowing ".$user["following_count"]." users\n";
		echo "Followed by ".$user["followers_count"]." users\n";
	}

	function print_repos($watches) {
		foreach ($watches as $repo) {
			echo "\t".$repo["owner"]."/"; color_on(GREEN);
			echo $repo["name"]; color_off();
			echo "\tat ".$repo["url"]."\n";
		}
	}

	function print_followers($followers) {
		$cf = count($followers);
		echo "You have $cf follower(s)";
		if($cf) echo ": ".implode(", ", $followers);
		echo ".\n";
	}

	function print_issues($issues) {
		foreach ($issues as $issue) {
			color_on(RED); echo "(".$issue["number"].") ";
			color_off(); echo $issue["title"]."\n";
		}
	}

	function is_not_mine($repo) {
		global $gh_user;

		return $repo["owner"] != $gh_user;
	}

	function check_third_arg($argc, $argv) {
		if($argc<3) {
			echo "Command ".$argv[1]." requires an argument.\n\n";
			usage();
		}
	}
	
	function check_repo_arg($arg) {
		if(strpos($arg,'/')===FALSE) {
			echo "Specify the repository as 'user/repository'\n\n";
			usage();
		}
	}

	function check_is_wd() {
		if(!is_dir(getcwd()."/.git")) {
			echo "You should run this command in a working directory.\n\n";
			usage();
		}
	}

	$argc = count($argv);
	if($argc < 2) usage();
	if(!array_key_exists($argv[1], $actions)) usage();

	include('php_github.inc');
	switch($argv[1]) {
		case "clone":
			check_third_arg($argc, $argv);
			$repo = $argv[2];
			if(strpos($repo, '/')===FALSE) $repo = $gh_user."/".$repo;
			system("git clone git@github.com:$repo.git");
			break;
		case "info":
			$user = $gh->getUserApi()->show($gh_user);
			print_user($user);
			$repos = $gh->getRepoApi()->getUserRepos($gh_user);
			echo "Your repositories (".count($repos)."):\n";
			print_repos($repos);
			$watches = $gh->getUserApi()->getWatchedRepos($gh_user);
			$watches = array_filter($watches, 'is_not_mine');
			echo "Watched repositories (".count($watches)."):\n";
			print_repos($watches);
			break;
		case "issues":
			check_third_arg($argc, $argv);
			check_is_wd();
			$repo =  basename(getcwd());
			if($argv[2]=="list") {
				$issues = $gh->getIssueApi()->getList(
					$gh_user,
					$repo,
					'open');
				print_issues($issues);
			} else if($argv[2]=="close") {
				$gh->getIssueApi()->close($gh_user, $repo, $argv[3]);
			} else if($argv[2]=="comment") {
				$gh->getIssueApi()->addComment($gh_user, $repo, 
					$argv[3], $argv[4]);
			} else {
				echo "Can't do '".$argv[2]."' on an issue.\n";
				usage();
			}
			break;
		case "follow":
			check_third_arg($argc, $argv);
			$gh->getUserApi()->follow($argv[2]);
			break;
		case "unfollow":
			check_third_arg($argc, $argv);
			$gh->getUserApi()->unFollow($argv[2]);
			break;
		case "followers":
			$followers = $gh->getUserApi()->getFollowers($gh_user);
			print_followers($followers);
			break;
		case "watch":
			check_third_arg($argc, $argv);
			check_repo_arg($argv[2]);
			$gh->get('repos/watch/'.$argv[2]);
			break;
		case "unwatch":
			check_third_arg($argc, $argv);
			check_repo_arg($argv[2]);
			$gh->get('repos/unwatch/'.$argv[2]);
			break;
	}

	$gh->deauthenticate();
?>