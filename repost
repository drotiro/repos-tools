#!/usr/bin/env php
<?
require('repos-tools/utils.inc');
$vcs = array ( "git", "svn", "bzr", "hg" );

$actions = array (
	"backup" => "make a tarball with the project(s) directory",
	"build" => "build with make or ant",
	"diff" => "show what's changed in your working directories",
	"list" => "list repositories",
	"log" => "show last commit logs",
	"pull" => "pull repositories from origin/parent",
	"push" => "push repositories to origin/parent",
	"status" => "show statuses"
);

$build_cmd = "([ -f Makefile ] && make ) || ([ -f build.xml ] && ant)";
$archive_cmd = 'R=$(basename $(pwd)) && TF=/tmp/$R-$(date +\'%Y%m%d\').tar.bz2 && '
	.'CMD="tar cjf $TF --exclude "*.git" "../$R"" && '
	.'echo Creating backup file $TF && $CMD >/dev/null 2>&1';

$cmds = array (
	"backup" => array (
		"git" => $archive_cmd, "svn" => $archive_cmd, "bzr" => $archive_cmd, "hg" => $archive_cmd
	),
	"build" => array (
		"git" => $build_cmd, "svn" =>  $build_cmd, "bzr" => $build_cmd, "hg" => $build_cmd
	),
	"diff" => array (
		"git" => "git diff --stat",
		"svn" => "svn diff | diffstat -q",
		"bzr" => "bzr diff | diffstat -q",
		"hg" => "hg diff | diffstat -q"
	),
	"list" => array ( 
		"git" => "git config remote.origin.url", 
		"svn" => "svn info | grep URL | sed -es/'URL: '//",
		"bzr" => "bzr info | grep 'parent branch' | sed -es/'  parent branch: '//",
		"hg" => "hg paths | grep default | sed -es/'default = '//"
	),
	"log" => array (
		"git" => "git log -n 1 --oneline",
		"svn" => "svn log -l 1 | head -n 4 | tail -n 1",
		"bzr" => "bzr log -l1 --line",
		"hg" => "hg log -l1 --template '{node|short} {desc|firstline}'"
	),
	"pull" => array (
		"git" => "git pull", "svn" => "svn update", "bzr" => "bzr pull", "hg" => "hg pull && hg update"
	),
	"push" => array (
		"git" => "git push", "bzr" => "bzr push :parent", "hg" => "hg push"
	),
	"status" => array (
		"git" => "git status", 
		"svn" => "svn status",
		"bzr" => "bzr status",
		"hg" => "hg status"
	)
);

$cfg_path = getenv("HOME")."/.repost";

class Repo {
	public $path, $type;
	function __construct($path, $type) {
		$this->path = $path;
		$this->type = $type;
	}
}

function usage() {
	global $actions, $argv;
	$name = basename($argv[0]);

	echo "Usage: $name <action> [<repolist>]\n";
	echo "Actions:\n";
	foreach( $actions as $k => $v) { pad("    $k",15); echo "$v\n"; }
	echo "<repolist> can be one of:\n";
	echo "    * all\t(the default) apply command to all the repositories\n";
	echo "    * this\tapply command the the current working directory\n";
	echo "    * a comma separated list of repository names and/or types. Eg.\n";
	echo "      $name build repo1,repo2\t=> builds repositories repo1 and repo2\n";
	echo "      $name push git:\t\t=> push all Git repositories to origin\n";
	echo "or you can execute any command with '$name do <repolist> <command>'\n";
	exit;
}

function cmd($repo, $action) {
	global $cmds, $argv;

	color_on(GREEN);
	pad(basename($repo->path), 20);
	pad("(".$repo->type.")", 8);
	color_off();
	chdir($repo->path);
	if($action=='do') { systemln($argv[3]); return; }
	if(!array_key_exists($repo->type, $cmds[$action])) {
		echo "(don't know how to '$action' this repository)\n";
		return;
	}
	systemln($cmds[$action][$repo->type]);
}

function build_repo_list($config, $filter) {
	global $vcs;

	$repobases = explode(":", $config["repobase"]);
	$repos = array();
	foreach($repobases as $b) {
		$base = realpath($b);
		foreach (glob("$base/*") as $file) {
			if(is_dir($file) ) {
				foreach($vcs as $v) if(is_dir("$file/.$v"))
					if( in_array("all", $filter) || 
						in_array(basename($file), $filter) ||
						in_array("$v:", $filter) ||
						(in_array("this", $filter) && $file==getcwd()) ) {
							$repos[] = new Repo($file, $v);
							break;
					}
			}
		}
	}
	return $repos;
}

function parse_config($config) {
	global $cmds;

	//user can override commands...
	foreach ($config as $k => $v) 
		if(substr_compare($k, "cmd.", 0, 4)==0) {
			$keys = explode(".", $k);
			$cmds[$keys[1]][$keys[2]] = $v;
		}
}

function gen_config_file() {
	global $cfg_path;

	echo "Type the full paths of the directories that *contains* the repositories,\n";
	echo "one per line. Terminate with an empty line.\n";
	$repobase = "";
	while($line = fgets(STDIN)) {
		$line = substr($line, 0, -1); //drop the newline
		if($line=="") break;
		$repobase = "$repobase:$line";
	}
	if($repobase=="") {
		echo "No base directory given. Quitting.\n";
		exit;
	}
	$repobase = "repobase = \"".substr($repobase,1)."\"\n";
	file_put_contents($cfg_path,$repobase);
}

/* Check args */
$argc = count($argv);
if($argc<2) usage();
$action = $argv[1];
if(!array_key_exists($action, $actions) && $action!='do') usage();
if($action=='do' && $argc!=4) usage();
$filter = isset($argv[2]) ? explode(",", $argv[2]) : array ("all");

/* Read configuration */
if(!is_file($cfg_path)) gen_config_file();
$config = parse_ini_file($cfg_path);
$repos = build_repo_list($config, $filter);
parse_config($config);

/* Do things */
foreach($repos as $repo) cmd($repo, $action);	
?>
